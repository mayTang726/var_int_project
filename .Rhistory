if (is.null(x)) {
return(data.frame(matrix(ncol = 0, nrow = 1)))
} else {
items_df <- bind_rows(map(x$items, as.data.frame))
items_df$version <- x$version  # 添加版本信息
return(items_df)
}
})
expanded_df <- bind_rows(expanded_list, .id = "row_id")
df <- df %>%
mutate(row_id = as.character(row_number()))
combined_df <- df %>%
select(-all_of(column_name)) %>%
left_join(expanded_df, by = "row_id") %>%
select(-row_id)
return(combined_df)
}
# 展开所有需要处理的嵌套列
nested_columns <- c("ensembl_transcripts")
for (col in nested_columns) {
test_df <- process_nested_array(test_df, col)
}
getwd()
library(jsonlite)
library(tidyr)
library(dplyr)
library(purrr)
# 1. read json file
hg19_info <- 'data/variant_response_hg19.json'
# hg38_info <- 'data/variant_response_hg38.json'
# 2. parse json file -> dataframe
hg19_df <- fromJSON(hg19_info)
# hg38_df <- fromJSON(hg38_info)
print(colnames(hg19_df))
# resolve hg19 response
# 3. delete unuseful columns
## if you want use the information below, you can add comment for the line which you wanna use
hg19_df <- hg19_df[!is.na(hg19_df$chromosome),]
hg19_df['regions'] <- NULL
hg19_df['gerp'] <- NULL
hg19_df['phastcons100way'] <- NULL
hg19_df['phylop100way'] <- NULL
hg19_df['maxentscan'] <- NULL
hg19_df['publications'] <- NULL
hg19_df['cbio_portal'] <- NULL
hg19_df['detail'] <- NULL
hg19_df['weill_cornell_medicine_pmkb'] <- NULL
hg19_df['icgc_somatic'] <- NULL
hg19_df['nih_gdc'] <- NULL
hg19_df['wustl_docm'] <- NULL
hg19_df['variant_pubmed_automap'] <- NULL
hg19_df['cadd'] <- NULL
hg19_df['dann_snvs'] <- NULL
# 4. add "amp_annotation_verdict_tier" as a new column
hg19_df['amp_annotation_verdict_tier'] <- hg19_df$amp_annotation$verdict$tier
hg19_df['amp_annotation'] <- NULL
# add "acmg_annotation_verdict" as a new column
hg19_df['acmg_annotation_verdict'] <- hg19_df$acmg_annotation$verdict$ACMG_rules$verdict
hg19_df['acmg_annotation'] <- NULL
hg19_df['dbnsfp'] <- NULL
test_df <- hg19_df[1:5,]
test_df <- hg19_df %>% select("ensembl_transcripts", "refseq_transcripts")
process_nested_array <- function(df, column_name) {
expanded_list <- map(df[[column_name]], function(x) {
if (is.null(x)) {
return(data.frame(matrix(ncol = 0, nrow = 1)))
} else {
items_df <- bind_rows(map(x$items, as.data.frame))
items_df$version <- x$version  # 添加版本信息
return(items_df)
}
})
expanded_df <- bind_rows(expanded_list, .id = "row_id")
df <- df %>%
mutate(row_id = as.character(row_number()))
combined_df <- df %>%
select(-all_of(column_name)) %>%
left_join(expanded_df, by = "row_id") %>%
select(-row_id)
return(combined_df)
}
# 展开所有需要处理的嵌套列
nested_columns <- c("ensembl_transcripts")
for (col in nested_columns) {
test_df <- process_nested_array(test_df, col)
}
View(test_df)
test_df <- hg19_df[1:5,]
test_df <- hg19_df %>% select("chromosome","ensembl_transcripts", "refseq_transcripts")
process_nested_array <- function(df, column_name) {
expanded_list <- map(df[[column_name]], function(x) {
if (is.null(x)) {
return(data.frame(matrix(ncol = 0, nrow = 1)))
} else {
items_df <- bind_rows(map(x$items, as.data.frame))
items_df$version <- x$version  # 添加版本信息
return(items_df)
}
})
expanded_df <- bind_rows(expanded_list, .id = "row_id")
df <- df %>%
mutate(row_id = as.character(row_number()))
combined_df <- df %>%
select(-all_of(column_name)) %>%
left_join(expanded_df, by = "row_id") %>%
select(-row_id)
return(combined_df)
}
# 展开所有需要处理的嵌套列
nested_columns <- c("ensembl_transcripts")
for (col in nested_columns) {
test_df <- process_nested_array(test_df, col)
}
View(test_df)
View(test_df)
test_df <- hg19_df[1:5,]
View(test_df)
View(test_df)
test_df <- hg19_df[1:5,]
test_df <- hg19_df %>% select("original_variant", "ensembl_transcripts")
process_nested_array <- function(df, column_name) {
expanded_list <- map(df[[column_name]], function(x) {
if (is.null(x)) {
return(data.frame(matrix(ncol = 0, nrow = 1)))
} else {
items_df <- bind_rows(map(x$items, as.data.frame))
items_df$version <- x$version  # 添加版本信息
return(items_df)
}
})
expanded_df <- bind_rows(expanded_list, .id = "row_id")
df <- df %>%
mutate(row_id = as.character(row_number()))
combined_df <- df %>%
select(-all_of(column_name)) %>%
left_join(expanded_df, by = "row_id") %>%
select(-row_id)
return(combined_df)
}
# 展开所有需要处理的嵌套列
nested_columns <- c("ensembl_transcripts")
for (col in nested_columns) {
test_df <- process_nested_array(test_df, col)
}
View(hg19_df)
View(hg19_df)
hg19_info <- 'data/variant_response_hg19.json'
# hg38_info <- 'data/variant_response_hg38.json'
# 2. parse json file -> dataframe
hg19_df <- fromJSON(hg19_info)
# hg38_df <- fromJSON(hg38_info)
print(colnames(hg19_df))
# resolve hg19 response
# 3. delete unuseful columns
## if you want use the information below, you can add comment for the line which you wanna use
hg19_df <- hg19_df[!is.na(hg19_df$chromosome),]
hg19_df['regions'] <- NULL
hg19_df['gerp'] <- NULL
hg19_df['phastcons100way'] <- NULL
hg19_df['phylop100way'] <- NULL
hg19_df['maxentscan'] <- NULL
hg19_df['publications'] <- NULL
hg19_df['cbio_portal'] <- NULL
hg19_df['detail'] <- NULL
hg19_df['weill_cornell_medicine_pmkb'] <- NULL
hg19_df['icgc_somatic'] <- NULL
hg19_df['nih_gdc'] <- NULL
hg19_df['wustl_docm'] <- NULL
hg19_df['variant_pubmed_automap'] <- NULL
hg19_df['cadd'] <- NULL
hg19_df['dann_snvs'] <- NULL
# 4. add "amp_annotation_verdict_tier" as a new column
hg19_df['amp_annotation_verdict_tier'] <- hg19_df$amp_annotation$verdict$tier
hg19_df['amp_annotation'] <- NULL
# add "acmg_annotation_verdict" as a new column
hg19_df['acmg_annotation_verdict'] <- hg19_df$acmg_annotation$verdict$ACMG_rules$verdict
hg19_df['acmg_annotation'] <- NULL
hg19_df['dbnsfp'] <- NULL
View(hg19_df)
test_df <- hg19_df[1:5,]
test_df <- test_df %>% select("original_variant", "ensembl_transcripts")
process_nested_array <- function(df, column_name) {
expanded_list <- map(df[[column_name]], function(x) {
if (is.null(x)) {
return(data.frame(matrix(ncol = 0, nrow = 1)))
} else {
items_df <- bind_rows(map(x$items, as.data.frame))
items_df$version <- x$version  # 添加版本信息
return(items_df)
}
})
expanded_df <- bind_rows(expanded_list, .id = "row_id")
df <- df %>%
mutate(row_id = as.character(row_number()))
combined_df <- df %>%
select(-all_of(column_name)) %>%
left_join(expanded_df, by = "row_id") %>%
select(-row_id)
return(combined_df)
}
# 展开所有需要处理的嵌套列
nested_columns <- c("ensembl_transcripts")
for (col in nested_columns) {
test_df <- process_nested_array(test_df, col)
}
View(test_df)
test_df <- hg19_df[1:5,]
test_df <- test_df %>% select("original_variant", "ensembl_transcripts","refseq_transcripts")
process_nested_array <- function(df, column_name) {
expanded_list <- map(df[[column_name]], function(x) {
if (is.null(x)) {
return(data.frame(matrix(ncol = 0, nrow = 1)))
} else {
items_df <- bind_rows(map(x$items, as.data.frame))
items_df$version <- x$version  # 添加版本信息
return(items_df)
}
})
expanded_df <- bind_rows(expanded_list, .id = "row_id")
df <- df %>%
mutate(row_id = as.character(row_number()))
combined_df <- df %>%
select(-all_of(column_name)) %>%
left_join(expanded_df, by = "row_id") %>%
select(-row_id)
return(combined_df)
}
# 展开所有需要处理的嵌套列
nested_columns <- c("ensembl_transcripts","refseq_transcripts")
for (col in nested_columns) {
test_df <- process_nested_array(test_df, col)
}
View(test_df)
test_df <- hg19_df[1:5,]
test_df <- test_df %>% select("original_variant", "ensembl_transcripts")
process_nested_array <- function(df, column_name) {
expanded_list <- map(df[[column_name]], function(x) {
if (is.null(x)) {
return(data.frame(matrix(ncol = 0, nrow = 1)))
} else {
items_df <- bind_rows(map(x$items, as.data.frame))
items_df$version <- x$version  # 添加版本信息
return(items_df)
}
})
expanded_df <- bind_rows(expanded_list, .id = "row_id")
df <- df %>%
mutate(row_id = as.character(row_number()))
combined_df <- df %>%
select(-all_of(column_name)) %>%
left_join(expanded_df, by = "row_id") %>%
select(-row_id)
return(combined_df)
}
# 展开所有需要处理的嵌套列
nested_columns <- c("ensembl_transcripts")
for (col in nested_columns) {
test_df <- process_nested_array(test_df, col)
}
View(test_df)
cosmic_mutation_census_df <- read.csv('/Users/stan/Desktop/internship_project/database/params 1/Cosmic_MutantCensus_Tsv_v99_GRCh37/Cosmic_MutantCensus_v99_GRCh37.tsv')
cosmic_sample_df <- read.csv('/Users/stan/Desktop/internship_project/database/params 1/Cosmic_Sample_Tsv_v99_GRCh37/Cosmic_Sample_v99_GRCh37.tsv')
View(cosmic_mutation_census_df)
typeof(cosmic_mutation_census_df)
cosmic_mutation_census_df <- as.data.frame(cosmic_mutation_census_df)
View(cosmic_mutation_census_df)
View(cosmic_sample_df)
View(cosmic_mutation_census_df)
cosmic_mutation_census_df <- read.delim('/Users/stan/Desktop/internship_project/database/params 1/Cosmic_MutantCensus_Tsv_v99_GRCh37/Cosmic_MutantCensus_v99_GRCh37.tsv', sep = "\t", header = TRUE, stringsAsFactors = FALSE)
cosmic_sample_df <- read.delim('/Users/stan/Desktop/internship_project/database/params 1/Cosmic_Sample_Tsv_v99_GRCh37/Cosmic_Sample_v99_GRCh37.tsv', sep = "\t", header = TRUE, stringsAsFactors = FALSE)
View(cosmic_mutation_census_df)
View(cosmic_mutation_census_df)
View(cosmic_sample_df)
colnames(cosmic_mutation_census_df)
colnames(cosmic_sample_df)
test_df$hgvs_p1 <- if(!is.na(test_df$hgvs_p1), paste('p.',test_df$hgvs_p1))
test_df$hgvs_p1 <- ifelse(is.na(test_df$hgvs_p1), NA, paste0("p.", test_df$hgvs_p1))
############### test code -> connect cosmic #######################################
test_df <- hg19_df[1:5,]
test_df <- test_df %>% select("original_variant", "ensembl_transcripts")
############### test code -> connect cosmic #######################################
test_df <- hg19_df[1:5,]
View(test_df[[10]][[1]])
View((test_df[[10]][[1]])[[1]][[1]])
test_df <- test_df %>% select("original_variant", "chromosome","pos","ensembl_transcripts")
process_nested_array <- function(df, column_name) {
expanded_list <- map(df[[column_name]], function(x) {
if (is.null(x)) {
return(data.frame(matrix(ncol = 0, nrow = 1)))
} else {
items_df <- bind_rows(map(x$items, as.data.frame))
items_df$version <- x$version  # 添加版本信息
return(items_df)
}
})
expanded_df <- bind_rows(expanded_list, .id = "row_id")
df <- df %>%
mutate(row_id = as.character(row_number()))
combined_df <- df %>%
select(-all_of(column_name)) %>%
left_join(expanded_df, by = "row_id") %>%
select(-row_id)
return(combined_df)
}
# 展开所有需要处理的嵌套列
nested_columns <- c("ensembl_transcripts")
for (col in nested_columns) {
test_df <- process_nested_array(test_df, col)
}
test_df$hgvs_p1 <- ifelse(is.na(test_df$hgvs_p1), NA, paste0("p.", test_df$hgvs_p1))
colnames(test_df)
# cosmic_mutation_census_df: CHROMOSOME, GENOME_START, MUTATION_CDS, MUTATION_AA
# test_df: chromosome,pos, hgvs,hgvs_p1
# match cosmic_mutation_census_df and test_df
# use inner join merge df
cosmic_mutation_census_df <- cosmic_mutation_census_df %>% select('CHROMOSOME', 'GENOME_START', 'MUTATION_CDS', 'MUTATION_AA')
cosmic_mutation_census_df <- read.delim('/Users/stan/Desktop/internship_project/database/params 1/Cosmic_MutantCensus_Tsv_v99_GRCh37/Cosmic_MutantCensus_v99_GRCh37.tsv', sep = "\t", header = TRUE, stringsAsFactors = FALSE)
# cosmic_mutation_census_df: CHROMOSOME, GENOME_START, MUTATION_CDS, MUTATION_AA
# test_df: chromosome,pos, hgvs,hgvs_p1
# match cosmic_mutation_census_df and test_df
# use inner join merge df
cosmic_mutation_census_df <- cosmic_mutation_census_df %>% select('CHROMOSOME', 'GENOME_START', 'MUTATION_CDS', 'MUTATION_AA', 'COSMIC_SAMPLE_ID')
merge_mutation_test <- test_df %>% inner_join(cosmic_mutation_census_df,
by=c("chromosome" = "CHROMOSOME", "pos" = "GENOME_START", "hgvs" = "MUTATION_CDS", "hgvs_p1" = "MUTATION_AA"))
View(merged_df)
merge_mutation_test <- test_df %>% left_join(cosmic_mutation_census_df,
by=c("chromosome" = "CHROMOSOME", "pos" = "GENOME_START", "hgvs" = "MUTATION_CDS", "hgvs_p1" = "MUTATION_AA"))
View(merge_mutation_test)
############### test code -> connect cosmic #######################################
test_df <- hg19_df[1:200,]
test_df <- test_df %>% select("original_variant", "chromosome","pos","ensembl_transcripts")
process_nested_array <- function(df, column_name) {
expanded_list <- map(df[[column_name]], function(x) {
if (is.null(x)) {
return(data.frame(matrix(ncol = 0, nrow = 1)))
} else {
items_df <- bind_rows(map(x$items, as.data.frame))
items_df$version <- x$version  # 添加版本信息
return(items_df)
}
})
expanded_df <- bind_rows(expanded_list, .id = "row_id")
df <- df %>%
mutate(row_id = as.character(row_number()))
combined_df <- df %>%
select(-all_of(column_name)) %>%
left_join(expanded_df, by = "row_id") %>%
select(-row_id)
return(combined_df)
}
# 展开所有需要处理的嵌套列
nested_columns <- c("ensembl_transcripts")
for (col in nested_columns) {
test_df <- process_nested_array(test_df, col)
}
test_df$hgvs_p1 <- ifelse(is.na(test_df$hgvs_p1), NA, paste0("p.", test_df$hgvs_p1))
merge_mutation_test <- test_df %>% left_join(cosmic_mutation_census_df,
by=c("chromosome" = "CHROMOSOME", "pos" = "GENOME_START", "hgvs" = "MUTATION_CDS", "hgvs_p1" = "MUTATION_AA"))
View(merge_mutation_test)
unique(merge_mutation_test$COSMIC_SAMPLE_ID)
merge_mutation_test <- test_df %>% inner_join(cosmic_mutation_census_df,
by=c("chromosome" = "CHROMOSOME", "pos" = "GENOME_START", "hgvs" = "MUTATION_CDS", "hgvs_p1" = "MUTATION_AA"))
View(merge_mutation_test)
merge_mutation_test <- test_df %>% inner_join(cosmic_mutation_census_df,
by=c("chromosome" = "CHROMOSOME", "pos" = "GENOME_START", "hgvs" = "MUTATION_CDS", "hgvs_p1" = "MUTATION_AA"))
merge_mutation_test <- test_df %>% left_join(cosmic_mutation_census_df,
by=c("chromosome" = "CHROMOSOME", "pos" = "GENOME_START", "hgvs" = "MUTATION_CDS", "hgvs_p1" = "MUTATION_AA"))
View(merge_mutation_test)
unique(merge_mutation_test$COSMIC_SAMPLE_ID)
test_df <- hg19_df[1:200,]
test_df <- test_df %>% select("original_variant", "chromosome","pos","ensembl_transcripts")
process_nested_array <- function(df, column_name) {
expanded_list <- map(df[[column_name]], function(x) {
if (is.null(x)) {
return(data.frame(matrix(ncol = 0, nrow = 1)))
} else {
items_df <- bind_rows(map(x$items, as.data.frame))
items_df$version <- x$version  # 添加版本信息
return(items_df)
}
})
expanded_df <- bind_rows(expanded_list, .id = "row_id")
df <- df %>%
mutate(row_id = as.character(row_number()))
combined_df <- df %>%
select(-all_of(column_name)) %>%
left_join(expanded_df, by = "row_id") %>%
select(-row_id)
return(combined_df)
}
# 展开所有需要处理的嵌套列
nested_columns <- c("ensembl_transcripts")
for (col in nested_columns) {
test_df <- process_nested_array(test_df, col)
}
test_df$hgvs_p1 <- ifelse(is.na(test_df$hgvs_p1), NA, paste0("p.", test_df$hgvs_p1))
merge_mutation_test <- test_df %>% left_join(cosmic_mutation_census_df,
by=c("chromosome" = "CHROMOSOME", "pos" = "GENOME_START", "hgvs" = "MUTATION_CDS", "hgvs_p1" = "MUTATION_AA"))
typeof(cosmic_mutation_census_df$CHROMOSOME)
typeof(test_df$chromosome)
typeof(test_df$pos)
typeof(cosmic_mutation_census_df$GENOME_START)
typeof(cosmic_mutation_census_df$MUTATION_CDS)
typeof(test_df$MUTATION_CDS)
typeof(test_df$hgvs)
typeof(test_df$hgvs_p1)
typeof(cosmic_mutation_census_df$MUTATION_AA)
cosmic_mutation_census_df$CHROMOSOME <- paste0("chr", cosmic_mutation_census_df$CHROMOSOME)
merge_mutation_test <- test_df %>% left_join(cosmic_mutation_census_df,
by=c("chromosome" = "CHROMOSOME", "pos" = "GENOME_START", "hgvs" = "MUTATION_CDS", "hgvs_p1" = "MUTATION_AA"))
merge_mutation_test <- <- merge(test_df, cosmic_mutation_census_df,
merge_mutation_test <- merge(test_df, cosmic_mutation_census_df,
by.x = c("chromosome", "pos", "hgvs", "hgvs_p1"),
by.y = c("CHROMOSOME", "GENOME_START", "MUTATION_CDS", "MUTATION_AA"),
all.x = TRUE)
unique(merge_mutation_test$COSMIC_SAMPLE_ID)
colnames(cosmic_sample_df)
cosmic_sample_df <- cosmic_sample_df %>% select("COSMIC_SAMPLE_ID","SAMPLE_TYPE")
test_df <- merge(test_df, cosmic_mutation_census_df,
by.x = c("chromosome", "pos", "hgvs", "hgvs_p1"),
by.y = c("CHROMOSOME", "GENOME_START", "MUTATION_CDS", "MUTATION_AA"),
all.x = TRUE)
test_df <- merge(test_df, cosmic_sample_df,
by.x = c("COSMIC_SAMPLE_ID"),
by.y = c("COSMIC_SAMPLE_ID"),
all.x = TRUE)
unique(test_df$SAMPLE_TYPE)
getwd()
library(jsonlite)
library(tidyr)
library(dplyr)
library(purrr)
# 1. read json file
# the direction path of result json files
folder_path <- "data/varsome_result_all"
file_list <- list.files(path = folder_path, pattern = "\\.json$", full.names = TRUE)
data_list <- list()
# put all json file to list for changing to df
for (file in file_list) {
json_data <- fromJSON(file)
data_df <- as.data.frame(json_data)
data_list <- append(data_list, list(data_df))
}
# find all columns
all_colnames <- unique(unlist(lapply(data_list, names)))
print(all_colnames)
# fill in missing columns
data_list <- lapply(data_list, function(df) {
missing_cols <- setdiff(all_colnames, names(df))
for (col in missing_cols) {
df[[col]] <- NA
}
return(df)
})
# combine all data to df
varsome_all_result_df <- bind_rows(data_list)
View(varsome_all_result_df)
colnames(varsome_all_result_df)
unique(varsome_all_result_df$ncbi_clinvar2)
length(unique(varsome_all_result_df$ncbi_clinvar2))
colnames(varsome_all_result_df)
test_df <- hg19_df[1:200,]
test_df <- test_df %>% select("original_variant", "chromosome","pos","ensembl_transcripts")
process_nested_array <- function(df, column_name) {
expanded_list <- map(df[[column_name]], function(x) {
if (is.null(x)) {
return(data.frame(matrix(ncol = 0, nrow = 1)))
} else {
items_df <- bind_rows(map(x$items, as.data.frame))
items_df$version <- x$version  # 添加版本信息
return(items_df)
}
})
expanded_df <- bind_rows(expanded_list, .id = "row_id")
df <- df %>%
mutate(row_id = as.character(row_number()))
combined_df <- df %>%
select(-all_of(column_name)) %>%
left_join(expanded_df, by = "row_id") %>%
select(-row_id)
return(combined_df)
}
# 展开所有需要处理的嵌套列
test_nested_columns <- c("ensembl_transcripts")
for (col in test_nested_columns) {
test_df <- process_nested_array(test_df, col)
}
# set same hgvsp. format with cosmic
test_df$hgvs_p1 <- ifelse(is.na(test_df$hgvs_p1), NA, paste0("p.", test_df$hgvs_p1))
# read cosmic file
cosmic_mutation_census_df <- read.delim('/Users/stan/Desktop/internship_project/database/params 1/Cosmic_MutantCensus_Tsv_v99_GRCh37/Cosmic_MutantCensus_v99_GRCh37.tsv', sep = "\t", header = TRUE, stringsAsFactors = FALSE)
cosmic_sample_df <- read.delim('/Users/stan/Desktop/internship_project/database/params 1/Cosmic_Sample_Tsv_v99_GRCh37/Cosmic_Sample_v99_GRCh37.tsv', sep = "\t", header = TRUE, stringsAsFactors = FALSE)
colnames(cosmic_mutation_census_df)
colnames(cosmic_sample_df)
# cosmic_mutation_census_df: CHROMOSOME, GENOME_START, MUTATION_CDS, MUTATION_AA
# test_df: chromosome,pos, hgvs,hgvs_p1
# match cosmic_mutation_census_df and test_df
# merge cosmic mucation file and test_df
cosmic_mutation_census_df <- cosmic_mutation_census_df %>% select('CHROMOSOME', 'GENOME_START', 'MUTATION_CDS', 'MUTATION_AA', 'COSMIC_SAMPLE_ID')
cosmic_mutation_census_df$CHROMOSOME <- paste0("chr", cosmic_mutation_census_df$CHROMOSOME)
test_df <- merge(test_df, cosmic_mutation_census_df,
by.x = c("chromosome", "pos", "hgvs", "hgvs_p1"),
by.y = c("CHROMOSOME", "GENOME_START", "MUTATION_CDS", "MUTATION_AA"),
all.x = TRUE)
# merge sample file and match sample_type to each variant
colnames(cosmic_sample_df)
cosmic_sample_df <- cosmic_sample_df %>% select("COSMIC_SAMPLE_ID","SAMPLE_TYPE")
test_df <- merge(test_df, cosmic_sample_df,
by.x = c("COSMIC_SAMPLE_ID"),
by.y = c("COSMIC_SAMPLE_ID"),
all.x = TRUE)
unique(test_df$SAMPLE_TYPE)
